{"version":3,"file":"opencage-api.min.js","sources":["webpack://opencage/webpack/runtime/define_property_getters","webpack://opencage/webpack/runtime/has_own_property","webpack://opencage/webpack/runtime/make_namespace_object","webpack://opencage/./src/errors/GeocodeError.ts","webpack://opencage/./src/helpers/geocodeHelpers.ts","webpack://opencage/./src/fetch.ts","webpack://opencage/./src/geocode.ts"],"sourcesContent":["__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * GeocodeError type\n *\n * Represents the Error Type\n */\nexport type GeocodeErrorStatus = {\n  /**\n   * The HTTP status code\n   */\n  code: number;\n  /**\n   * The error message\n   */\n  message: string;\n};\n\n/**\n * GeocodeError class\n *\n * Represents the Error Object\n */\nexport class GeocodeError extends Error {\n  /**\n   * The response error object or the status error object for backward compatibility\n   */\n  response?: Response | { status: GeocodeErrorStatus };\n  /**\n   * The status error object\n   */\n  status?: GeocodeErrorStatus;\n  constructor(message: string) {\n    super(message);\n    this.name = 'GeocodeError';\n  }\n}\n","import { GeocodingRequest } from '../types/GeocodingRequest';\nimport { GeocodeError, GeocodeErrorStatus } from '../errors/GeocodeError';\n\nconst OPENCAGEDATA_JSON_URL = 'https://api.opencagedata.com/geocode/v1/json';\n\n/**\n * @private\n * @description Returns a {GeocodeError} object with status (validation error)\n * @param code {number} HTTP status code\n * @param message {string} error message\n * @returns {GeocodeError}\n *\n */\nexport function buildValidationError(code: number, message: string) {\n  const error = new GeocodeError(message);\n  const status: GeocodeErrorStatus = {\n    code,\n    message,\n  };\n  error.status = status;\n  error.response = { status };\n  return error;\n}\n\n/**\n * @private\n * @description checks the response status and throws an error if the status is not ok\n * @param response {Response} the response object\n * @returns {Response} the response object\n * @throws {GeocodeError} the error object\n */\nexport function checkFetchStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new GeocodeError(response.statusText);\n  error.status = {\n    code: response.status,\n    message: response.statusText,\n  };\n  error.response = response;\n  throw error;\n}\n\nexport function parseJSON(response: Response) {\n  return response.json();\n}\n/**\n * @private\n * returns true is `param` is not defined or empty\n * @param  {String}  param object property as a string\n * @return {Boolean}       returns value\n */\nexport function isUndefinedOrEmpty(param: string | null | undefined): boolean {\n  return typeof param === 'undefined' || param === '';\n}\n\n/**\n * @private\n * returns true is `param` is not defined or null\n * @param  {String}  param object property as a string\n * @return {Boolean}       returns value\n */\nexport function isUndefinedOrNull(\n  param: GeocodingRequest | null | undefined\n): boolean {\n  return typeof param === 'undefined' || param === null;\n}\n\n/**\n * @private\n *\n * @param input\n * @returns the request query string\n */\nexport function buildQueryString(input: any): string {\n  if (isUndefinedOrNull(input)) {\n    return '';\n  }\n  return Object.keys(input)\n    .map(\n      (key) =>\n        `${encodeURIComponent(key)}=${encodeURIComponent(input[key] || '')}`\n    )\n    .join('&');\n}\n\n/**\n * @private\n * Builds the query params including key and proxy URL\n *\n * @param {*} input\n */\nexport function buildQuery(input: GeocodingRequest) {\n  const query = { ...input };\n  let endpoint = OPENCAGEDATA_JSON_URL;\n  let missingKey = false;\n  if (!isUndefinedOrEmpty(input.proxyURL)) {\n    endpoint = input.proxyURL as string;\n    delete query.proxyURL;\n  } else {\n    if (isUndefinedOrEmpty(input.key)) {\n      query.key = process.env.OPENCAGE_API_KEY;\n    }\n    if (isUndefinedOrEmpty(query.key)) {\n      missingKey = true;\n    }\n  }\n  return {\n    missingKey,\n    endpoint,\n    query,\n  };\n}\n","import { version } from './version';\nimport { checkFetchStatus, parseJSON } from './helpers/geocodeHelpers';\n\nconst USER_AGENT = `OpenCageData Geocoding NodeJS API Client/${version}`;\n\n/**\n * fetches the url and returns a promise\n * @param  {String}  url     the url to fetch\n * @param  {Function} resolve the resolve function\n * @param  {Function} reject  the reject function\n */\nexport async function fetchUrl(url: string, resolve: any, reject: any) {\n  fetch(url, {\n    method: 'GET',\n    headers: {\n      'User-Agent': USER_AGENT,\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  })\n    .then(checkFetchStatus)\n    .then(parseJSON)\n    .then((data) => {\n      // console.debug('request succeeded with JSON response', data);\n      resolve(data);\n    })\n    .catch((error) => {\n      // console.debug('request failed', { error });\n      reject(error);\n    });\n}\n","import { GeocodingRequest } from './types/GeocodingRequest';\nimport { GeocodingResponse } from './types/GeocodingResponse';\nimport { fetchUrl } from './fetch';\nimport {\n  buildValidationError,\n  isUndefinedOrNull,\n  buildQueryString,\n  buildQuery,\n} from './helpers/geocodeHelpers';\n\nconst MISSING_OR_BAD_QUERY = 'missing or bad query';\nconst MISSING_API_KEY = 'missing API key';\n\n/**\n * geocode address and reverse geocode coordinates using\n * [OpenCage API](https://opencagedata.com/api) requesting the json format.\n *\n * @param  {Object} input the input query parameter as JSON object,\n *  the attribute `q` is required, the `key` can be omitted when using\n *  a `proxyURL`, and when using node with a dedicated environment variable\n *  (OPENCAGE_API_KEY).\n *  Others optional parameters can be found at OpenCage Data API\n *  [documentation](https://opencagedata.com/api#forward-opt)\n *\n * @return {Promise} a promise resolved by the json format API payload\n */\nexport async function geocode(\n  input: GeocodingRequest\n): Promise<GeocodingResponse> {\n  return new Promise((resolve, reject) => {\n    if (isUndefinedOrNull(input)) {\n      const error = buildValidationError(400, MISSING_OR_BAD_QUERY);\n      reject(error);\n      return;\n    }\n    const params = buildQuery(input);\n    if (params.missingKey) {\n      const error = buildValidationError(401, MISSING_API_KEY);\n      reject(error);\n      return;\n    }\n    const { query, endpoint } = params;\n    const qs = buildQueryString(query);\n    const url = `${endpoint}?${qs}`;\n    // console.debug(url);\n    fetchUrl(url, resolve, reject);\n  });\n}\n"],"names":["Object","e","Symbol","GeocodeError","Error","message","buildValidationError","code","error","status","checkFetchStatus","response","parseJSON","isUndefinedOrEmpty","param","fetchUrl","url","resolve","reject","fetch","data","geocode","input","Promise","params","buildQuery","query","endpoint","missingKey","process","qs","key","encodeURIComponent"],"mappings":"oPAAA,GAAoB,CAAC,CAAG,CAAC,EAAS,KACjC,IAAI,IAAI,KAAO,EACL,EAAoB,CAAC,CAAC,EAAY,IAAQ,CAAC,EAAoB,CAAC,CAAC,EAAS,IACzEA,OAAO,cAAc,CAAC,EAAS,EAAK,CAAE,WAAY,GAAM,IAAK,CAAU,CAAC,EAAI,AAAC,EAGzF,ECNA,EAAoB,CAAC,CAAG,CAAC,EAAK,IAAUA,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,EAAK,GCClF,EAAoB,CAAC,CAAG,AAACC,IACrB,AAAkB,aAAlB,OAAOC,QAA0BA,OAAO,WAAW,EACrDF,OAAO,cAAc,CAACC,EAASC,OAAO,WAAW,CAAE,CAAE,MAAO,QAAS,GAEtEF,OAAO,cAAc,CAACC,EAAS,aAAc,CAAE,MAAO,EAAK,EAC5D,E,sCCeO,OAAME,UAAqBC,MAIhC,QAAqD,AAIrD,OAA4B,AAC5B,aAAYC,CAAe,CAAE,CAC3B,KAAK,CAACA,GACN,IAAI,CAAC,IAAI,CAAG,cACd,CACF,CCrBO,SAASC,EAAqBC,CAAY,CAAEF,CAAe,EAChE,IAAMG,EAAQ,IAAIL,EAAaE,GACzBI,EAA6B,CACjCF,KAAAA,EACAF,QAAAA,CACF,EAGA,OAFAG,EAAM,MAAM,CAAGC,EACfD,EAAM,QAAQ,CAAG,CAAEC,OAAAA,CAAO,EACnBD,CACT,CASO,SAASE,EAAiBC,CAAkB,EACjD,GAAIA,EAAS,MAAM,EAAI,KAAOA,EAAS,MAAM,CAAG,IAC9C,OAAOA,EAET,IAAMH,EAAQ,IAAIL,EAAaQ,EAAS,UAAU,CAMlD,OALAH,EAAM,MAAM,CAAG,CACb,KAAMG,EAAS,MAAM,CACrB,QAASA,EAAS,UAAU,AAC9B,EACAH,EAAM,QAAQ,CAAGG,EACXH,CACR,CAEO,SAASI,EAAUD,CAAkB,EAC1C,OAAOA,EAAS,IAAI,EACtB,CAOO,SAASE,EAAmBC,CAAgC,EACjE,OAAO,AAAiB,SAAVA,GAAyBA,AAAU,KAAVA,CACzC,CC5CO,eAAeC,EAASC,CAAW,CAAEC,CAAY,CAAEC,CAAW,EACnEC,MAAMH,EAAK,CACT,OAAQ,MACR,QAAS,CACP,aAZa,wDAab,eAAgB,mBAChB,OAAQ,kBACV,CACF,GACG,IAAI,CAACN,GACL,IAAI,CAACE,GACL,IAAI,CAAC,AAACQ,IAELH,EAAQG,EACV,GACC,KAAK,CAAC,AAACZ,IAENU,EAAOV,EACT,EACJ,CCJO,eAAea,EACpBC,CAAuB,EAEvB,OAAO,IAAIC,QAAQ,CAACN,EAASC,KAC3B,GFoCK,MEpCiBI,EAAQ,YAE5BJ,EADcZ,EAAqB,IArBZ,yBAyBzB,IAAMkB,EAASC,AF0DZ,SAAoBH,CAAuB,EAChD,IAAMI,EAAQ,CAAE,GAAGJ,CAAK,AAAC,EACrBK,EA5FwB,+CA6FxBC,EAAa,GAYjB,OAXKf,EAAmBS,EAAM,QAAQ,GAIhCT,EAAmBS,EAAM,GAAG,GAC9BI,CAAAA,EAAM,GAAG,CAAGG,QAAQ,GAAG,CAAC,gBAAgB,AAAD,EAErChB,EAAmBa,EAAM,GAAG,GAC9BE,CAAAA,EAAa,EAAG,IAPlBD,EAAWL,EAAM,QAAQ,CACzB,OAAOI,EAAM,QAAQ,EAShB,CACLE,WAAAA,EACAD,SAAAA,EACAD,MAAAA,CACF,CACF,EE9E8BJ,GAC1B,GAAIE,EAAO,UAAU,CAAE,YAErBN,EADcZ,EAAqB,IA1BjB,oBA8BpB,GAAM,CAAEoB,MAAAA,CAAK,CAAEC,SAAAA,CAAQ,CAAE,CAAGH,EACtBM,EFkCR,AAVO,MExBuBJ,EFmCrB,GAEF1B,OAAO,IAAI,CErCY0B,GFsC3B,GAAG,CACF,AAACK,GACC,CAAC,EAAEC,mBAAmBD,GAAK,CAAC,EAAEC,mBAAmBV,AExCzBI,CFwC8B,CAACK,EAAI,EAAI,IAAI,CAAC,EAEvE,IAAI,CAAC,KEvCNhB,EAFY,CAAC,EAAEY,EAAS,CAAC,EAAEG,EAAG,CAAC,CAEjBb,EAASC,EACzB,EACF,C"}