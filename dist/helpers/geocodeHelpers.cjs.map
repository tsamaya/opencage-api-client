{"version":3,"file":"helpers/geocodeHelpers.cjs","sources":["webpack://opencage-api-client/webpack/runtime/define_property_getters","webpack://opencage-api-client/webpack/runtime/has_own_property","webpack://opencage-api-client/webpack/runtime/make_namespace_object","webpack://opencage-api-client/./src/helpers/geocodeHelpers.ts"],"sourcesContent":["__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GeocodingRequest } from '../types/GeocodingRequest';\nimport { GeocodeError, GeocodeErrorStatus } from '../errors/GeocodeError';\n\nconst OPENCAGEDATA_JSON_URL = 'https://api.opencagedata.com/geocode/v1/json';\n\n/**\n * @private\n * @description Returns a {GeocodeError} object with status (validation error)\n * @param code {number} HTTP status code\n * @param message {string} error message\n * @returns {GeocodeError}\n *\n */\nexport function buildValidationError(code: number, message: string) {\n  const error = new GeocodeError(message);\n  const status: GeocodeErrorStatus = {\n    code,\n    message,\n  };\n  error.status = status;\n  error.response = { status };\n  return error;\n}\n\n/**\n * @private\n * @description checks the response status and throws an error if the status is not ok\n * @param response {Response} the response object\n * @returns {Response} the response object\n * @throws {GeocodeError} the error object\n */\nexport function checkFetchStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new GeocodeError(response.statusText);\n  error.status = {\n    code: response.status,\n    message: response.statusText,\n  };\n  error.response = response;\n  throw error;\n}\n\nexport function parseJSON(response: Response) {\n  return response.json();\n}\n/**\n * @private\n * returns true is `param` is not defined or empty\n * @param  {String}  param object property as a string\n * @return {Boolean}       returns value\n */\nexport function isUndefinedOrEmpty(param: string | null | undefined): boolean {\n  return typeof param === 'undefined' || param === '';\n}\n\n/**\n * @private\n * returns true is `param` is not defined or null\n * @param  {String}  param object property as a string\n * @return {Boolean}       returns value\n */\nexport function isUndefinedOrNull(\n  param: GeocodingRequest | null | undefined\n): boolean {\n  return typeof param === 'undefined' || param === null;\n}\n\n/**\n * @private\n *\n * @param input\n * @returns the request query string\n */\nexport function buildQueryString(input: any): string {\n  if (isUndefinedOrNull(input)) {\n    return '';\n  }\n  return Object.keys(input)\n    .map(\n      (key) =>\n        `${encodeURIComponent(key)}=${encodeURIComponent(input[key] || '')}`\n    )\n    .join('&');\n}\n\n/**\n * @private\n * Builds the query params including key and proxy URL\n *\n * @param {*} input\n */\nexport function buildQuery(input: GeocodingRequest) {\n  const query = { ...input };\n  let endpoint = OPENCAGEDATA_JSON_URL;\n  let missingKey = false;\n  if (!isUndefinedOrEmpty(input.proxyURL)) {\n    endpoint = input.proxyURL as string;\n    delete query.proxyURL;\n  } else {\n    if (isUndefinedOrEmpty(input.key)) {\n      query.key = process.env.OPENCAGE_API_KEY;\n    }\n    if (isUndefinedOrEmpty(query.key)) {\n      missingKey = true;\n    }\n  }\n  return {\n    missingKey,\n    endpoint,\n    query,\n  };\n}\n"],"names":["__webpack_require__","definition","key","Object","obj","prop","Symbol","OPENCAGEDATA_JSON_URL","buildValidationError","code","message","error","GeocodeError","status","checkFetchStatus","response","parseJSON","isUndefinedOrEmpty","param","isUndefinedOrNull","buildQueryString","input","encodeURIComponent","buildQuery","query","endpoint","missingKey","process"],"mappings":";;;IAAAA,oBAAoB,CAAC,GAAG,CAAC,UAASC;QACjC,IAAI,IAAIC,OAAOD,WACR,IAAGD,oBAAoB,CAAC,CAACC,YAAYC,QAAQ,CAACF,oBAAoB,CAAC,CAAC,UAASE,MACzEC,OAAO,cAAc,CAAC,UAASD,KAAK;YAAE,YAAY;YAAM,KAAKD,UAAU,CAACC,IAAI;QAAC;IAGzF;;;ICNAF,oBAAoB,CAAC,GAAG,CAACI,KAAKC,OAAUF,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAACC,KAAKC;;;ICClFL,oBAAoB,CAAC,GAAG,CAAC;QACxB,IAAG,AAAkB,eAAlB,OAAOM,UAA0BA,OAAO,WAAW,EACrDH,OAAO,cAAc,CAAC,UAASG,OAAO,WAAW,EAAE;YAAE,OAAO;QAAS;QAEtEH,OAAO,cAAc,CAAC,UAAS,cAAc;YAAE,OAAO;QAAK;IAC5D;;;;;;;;;;;;;;ACHA,MAAMI,wBAAwB;AAUvB,SAASC,qBAAqBC,IAAY,EAAEC,OAAe;IAChE,MAAMC,QAAQ,IAAIC,iCAAAA,YAAYA,CAACF;IAC/B,MAAMG,SAA6B;QACjCJ;QACAC;IACF;IACAC,MAAM,MAAM,GAAGE;IACfF,MAAM,QAAQ,GAAG;QAAEE;IAAO;IAC1B,OAAOF;AACT;AASO,SAASG,iBAAiBC,QAAkB;IACjD,IAAIA,SAAS,MAAM,IAAI,OAAOA,SAAS,MAAM,GAAG,KAC9C,OAAOA;IAET,MAAMJ,QAAQ,IAAIC,iCAAAA,YAAYA,CAACG,SAAS,UAAU;IAClDJ,MAAM,MAAM,GAAG;QACb,MAAMI,SAAS,MAAM;QACrB,SAASA,SAAS,UAAU;IAC9B;IACAJ,MAAM,QAAQ,GAAGI;IACjB,MAAMJ;AACR;AAEO,SAASK,UAAUD,QAAkB;IAC1C,OAAOA,SAAS,IAAI;AACtB;AAOO,SAASE,mBAAmBC,KAAgC;IACjE,OAAO,AAAiB,WAAVA,SAAyBA,AAAU,OAAVA;AACzC;AAQO,SAASC,kBACdD,KAA0C;IAE1C,OAAO,QAAOA;AAChB;AAQO,SAASE,iBAAiBC,KAAU;IACzC,IAAIF,kBAAkBE,QACpB,OAAO;IAET,OAAOlB,OAAO,IAAI,CAACkB,OAChB,GAAG,CACF,CAACnB,MACC,GAAGoB,mBAAmBpB,KAAK,CAAC,EAAEoB,mBAAmBD,KAAK,CAACnB,IAAI,IAAI,KAAK,EAEvE,IAAI,CAAC;AACV;AAQO,SAASqB,WAAWF,KAAuB;IAChD,MAAMG,QAAQ;QAAE,GAAGH,KAAK;IAAC;IACzB,IAAII,WAAWlB;IACf,IAAImB,aAAa;IACjB,IAAKT,mBAAmBI,MAAM,QAAQ,GAG/B;QACL,IAAIJ,mBAAmBI,MAAM,GAAG,GAC9BG,MAAM,GAAG,GAAGG,QAAQ,GAAG,CAAC,gBAAgB;QAE1C,IAAIV,mBAAmBO,MAAM,GAAG,GAC9BE,aAAa;IAEjB,OAVyC;QACvCD,WAAWJ,MAAM,QAAQ;QACzB,OAAOG,MAAM,QAAQ;IACvB;IAQA,OAAO;QACLE;QACAD;QACAD;IACF;AACF"}