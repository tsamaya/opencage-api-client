{"version":3,"file":"geocode.js","sources":["webpack://opencage-api-client/./src/geocode.ts"],"sourcesContent":["import type { GeocodingRequest } from './types/GeocodingRequest';\nimport type { GeocodingResponse } from './types/GeocodingResponse';\nimport type { GeocodingOptions } from './types/GeocodingOptions';\nimport { fetchUrl } from './fetch';\nimport {\n  buildValidationError,\n  isUndefinedOrNull,\n  buildQueryString,\n  buildQuery,\n} from './helpers/geocodeHelpers';\n\nconst MISSING_OR_BAD_QUERY = 'missing or bad query';\nconst MISSING_API_KEY = 'missing API key';\n\n/**\n * geocode address and reverse geocode coordinates using\n * [OpenCage API](https://opencagedata.com/api) requesting the json format.\n *\n * @param  {GeocodingRequest} input the input query parameter as JSON object,\n *  the attribute `q` is required, the `key` can be omitted when using\n *  a `proxyURL`, and when using node with a dedicated environment variable\n *  (OPENCAGE_API_KEY).\n *  Others optional parameters can be found at OpenCage Data API\n *  [documentation](https://opencagedata.com/api#forward-opt)\n *\n * @param  {Object} options the options object,\n *  the attribute `signal` is used to abort the request when the signal is aborted.\n *  the attribute `proxyURL` is used to proxy the request to a different URL.\n *\n * @return {Promise<GeocodingResponse>} a promise resolved by the json format API payload\n */\nexport async function geocode(\n  input: GeocodingRequest,\n  options?: GeocodingOptions\n): Promise<GeocodingResponse> {\n  return new Promise((resolve, reject) => {\n    if (isUndefinedOrNull(input)) {\n      const error = buildValidationError(400, MISSING_OR_BAD_QUERY);\n      reject(error);\n      return;\n    }\n    const params = buildQuery(input, options);\n    if (params.missingKey) {\n      const error = buildValidationError(401, MISSING_API_KEY);\n      reject(error);\n      return;\n    }\n    const { query, endpoint } = params;\n    const qs = buildQueryString(query);\n    const url = `${endpoint}?${qs}`;\n    // console.debug(url);\n    fetchUrl(url, resolve, reject, options?.signal);\n  });\n}\n"],"names":["MISSING_OR_BAD_QUERY","MISSING_API_KEY","geocode","input","options","Promise","resolve","reject","isUndefinedOrNull","error","buildValidationError","params","buildQuery","query","endpoint","qs","buildQueryString","url","fetchUrl"],"mappings":";;AAWA,MAAMA,uBAAuB;AAC7B,MAAMC,kBAAkB;AAmBjB,eAAeC,QACpBC,KAAuB,EACvBC,OAA0B;IAE1B,OAAO,IAAIC,QAAQ,CAACC,SAASC;QAC3B,IAAIC,kBAAkBL,QAAQ;YAC5B,MAAMM,QAAQC,qBAAqB,KAAKV;YACxCO,OAAOE;YACP;QACF;QACA,MAAME,SAASC,WAAWT,OAAOC;QACjC,IAAIO,OAAO,UAAU,EAAE;YACrB,MAAMF,QAAQC,qBAAqB,KAAKT;YACxCM,OAAOE;YACP;QACF;QACA,MAAM,EAAEI,KAAK,EAAEC,QAAQ,EAAE,GAAGH;QAC5B,MAAMI,KAAKC,iBAAiBH;QAC5B,MAAMI,MAAM,GAAGH,SAAS,CAAC,EAAEC,IAAI;QAE/BG,SAASD,KAAKX,SAASC,QAAQH,SAAS;IAC1C;AACF"}