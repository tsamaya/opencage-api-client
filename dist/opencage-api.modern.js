import*as t from"dotenv";function n(){return n=Object.assign?Object.assign.bind():function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])}return t},n.apply(this,arguments)}class e extends Error{constructor(...t){super(...t),this.response=void 0,this.status=void 0}}function s(t,n){const s=new e(n),o={code:t,message:n};return s.status=o,s.response={status:o},s}function o(t){if(t.status>=200&&t.status<300)return t;const n=new e(t.statusText);throw n.status={code:t.status,message:t.statusText},n.response=t,n}function r(t){return t.json()}function i(t){return void 0===t||""===t}function c(t){return null==t}async function u(t){return new Promise((e,u)=>{if(c(t))return void u(s(400,"missing or bad query"));const a=function(t){const e=n({},t);let s="https://api.opencagedata.com/geocode/v1/json",o=!1;return i(t.proxyURL)?(i(t.key)&&(e.key=process.env.OPENCAGE_API_KEY),i(e.key)&&(o=!0)):(s=t.proxyURL,delete e.proxyURL),{missingKey:o,endpoint:s,query:e}}(t);if(a.missingKey)return void u(s(401,"missing API key"));const{query:p,endpoint:d}=a,f=function(t){return c(t)?"":Object.keys(t).map(n=>`${encodeURIComponent(n)}=${encodeURIComponent(t[n]||"")}`).join("&")}(p);!async function(t,n,e){fetch(t).then(o).then(r).then(t=>{n(t)}).catch(t=>{e(t)})}(`${d}?${f}`,e,u)})}t.config();const a={geocode:u};export{e as GeocodeError,a as default,u as geocode};
//# sourceMappingURL=opencage-api.modern.js.map
