import*as t from"dotenv";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},e.apply(this,arguments)}class n extends Error{constructor(...t){super(...t),this.response=void 0,this.status=void 0}}function s(t,e){const s=new n(e);return s.response={status:{code:t,message:e}},s}const o=t=>{if(t.status>=200&&t.status<300)return t;const e=new n(t.statusText);throw e.status={code:t.status,message:t.statusText},e},r=t=>t.json();function c(t){return void 0===t||""===t}function i(t){return null==t}function u(t){return new Promise((n,u)=>{if(i(t))return void u(s(400,"missing or bad query"));const a=function(t){const n=e({},t);let s="https://api.opencagedata.com/geocode/v1/json",o=!1;return c(t.proxyURL)?(c(t.key)&&(n.key=process.env.OPENCAGE_API_KEY||process.env.OCD_API_KEY),c(n.key)&&(o=!0)):(s=t.proxyURL,delete n.proxyURL),{missingKey:o,endpoint:s,query:n}}(t);if(a.missingKey)return void u(s(401,"missing API key"));const{query:p,endpoint:d}=a,f=function(t){return i(t)?"":Object.keys(t).map(e=>`${encodeURIComponent(e)}=${encodeURIComponent(t[e])}`).join("&")}(p);!async function(t,e,n){fetch(t).then(o).then(r).then(t=>{e(t)}).catch(t=>{n(t)})}(`${d}?${f}`,n,u)})}t.config();const a={geocode:u};export{n as GeocodeError,a as default,u as geocode};
//# sourceMappingURL=opencage-api.modern.js.map
