import*as n from"dotenv";function t(){return t=Object.assign?Object.assign.bind():function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o])}return n},t.apply(this,arguments)}class e extends Error{constructor(...n){super(...n),this.response=void 0,this.status=void 0}}function o(n,t){const o=new e(t),s={code:n,message:t};return o.status=s,o.response={status:s},o}function s(n){if(n.status>=200&&n.status<300)return n;const t=new e(n.statusText);throw t.status={code:n.status,message:n.statusText},t.response=n,t}function r(n){return n.json()}function i(n){return void 0===n||""===n}function c(n){return null==n}async function a(n){return new Promise((e,a)=>{if(c(n))return void a(o(400,"missing or bad query"));const u=function(n){const e=t({},n);let o="https://api.opencagedata.com/geocode/v1/json",s=!1;return i(n.proxyURL)?(i(n.key)&&(e.key=process.env.OPENCAGE_API_KEY),i(e.key)&&(s=!0)):(o=n.proxyURL,delete e.proxyURL),{missingKey:s,endpoint:o,query:e}}(n);if(u.missingKey)return void a(o(401,"missing API key"));const{query:p,endpoint:d}=u,f=function(n){return c(n)?"":Object.keys(n).map(t=>`${encodeURIComponent(t)}=${encodeURIComponent(n[t]||"")}`).join("&")}(p);!async function(n,t,e){fetch(n,{method:"GET",headers:{"User-Agent":"OpenCageData Geocoding NodeJS API Client","Content-Type":"application/json",Accept:"application/json"}}).then(s).then(r).then(n=>{t(n)}).catch(n=>{e(n)})}(`${d}?${f}`,e,a)})}n.config();const u={geocode:a};export{u as default,a as geocode};
//# sourceMappingURL=opencage-api.modern.js.map
